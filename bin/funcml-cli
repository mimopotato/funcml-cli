#!/usr/bin/env ruby
# frozen_string_literal: true

if ENV.fetch('LOCAL_DEV', nil)
  $LOAD_PATH.unshift File.expand_path("../../funcml-core/lib", __dir__)
end

require "bundler/setup"
require "thor"
require "funcml-core"
require "funcml-cli"

require "json"
require "yaml"

class App < Thor
  def self.exit_on_failure?
    true
  end

  desc :version, "Shows currently used versions of funcml"
  def version
    puts Funcmlcli::Version.show
    exit(0)
  end

  desc "render PATH", "Render target file"
  option :mutation_files, aliases: [:m], desc: "External mutation files", default: [], type: "string", repeatable: true
  option :output_format, aliases: [:f], desc: "Output format, either yaml or json", default: "yaml", type: "string"
  option :output_stdout, aliases: [:s], desc: "Set output to STDOUT", default: true, type: "boolean"
  option :output_directory, aliases: [:o], desc: "Output directory for mutated files", default: "false", type: "string"
  def render(path)
    renderer = Funcmlcli::Render.new(path, options)
    renderer.render!
    exit(0)
  end

  desc "render-all PATH", "Render all files in PATH"
  option :mutation_files, aliases: [:m], desc: "External mutation files", default: [], type: "string", repeatable: true
  option :output_format, aliases: [:f], desc: "Output format, either yaml or json", default: "yaml", type: "string"
  option :output_stdout, aliases: [:s], desc: "Set output to STDOUT", default: true, type: "boolean"
  option :output_directory, aliases: [:o], desc: "Output directory for mutated files", default: "false", type: "string"
  option :extensions, aliases: [:x], desc: "Only select files with according extensions", default: [], type: "string", repeatable: true 

  def render_all(path)
    files = []
    options[:extensions].each do |extension|
      files << Dir.glob("#{path}/**/*.#{extension}")
    end

    files.flatten.each do |file|
      renderer = Funcmlcli::Render.new(file, options)
      renderer.render!
    end
    
    exit(0)
  end
end

App.start